version: "3.7"

services:
  backend-staging:
    container_name: backend-staging
    build:
      context: ./app_backend
      dockerfile: Dockerfile
    depends_on:
      - db-staging
    volumes:
      - backend-staging:/app/backend
      - ./config/backend/.env.staging:/app/backend/.env
    networks:
      - app-network-staging

  frontend-staging:
    container_name: frontend-staging
    build:
      context: ./app_frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_MODE=development
        - REACT_APP_API=http://app.staging:8480/api
    volumes:
      - frontend-staging:/app/frontend
      - ./config/frontend/.env.staging:/app/frontend/.env
    networks:
      - app-network-staging

  db-staging:
    container_name: db-staging
    image: mysql:5.7
    restart: unless-stopped
    ports:
      - "3304:3306"
    tty: true
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: staging
      MYSQL_USER: staging
      MYSQL_PASSWORD: staging123
    volumes:
      - ./db_staging:/var/lib/mysql
    networks:
      - app-network-staging

  phpmyadmin-staging:
    container_name: phpmyadmin-staging
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      PMA_HOST: db-staging
      PMA_PORT: 3306
      PMA_USER: staging
      PMA_PASSWORD: staging123
    networks:
      - app-network-staging
    depends_on:
      - db-staging

  webserver-staging:
    container_name: webserver-staging
    image: webdevops/php-nginx:8.2-alpine
    restart: unless-stopped
    tty: true
    ports:
      - "82:82"
    volumes:
      - frontend-staging:/app/frontend
      - backend-staging:/app/backend
      - ./config/nginx/nginx.staging.conf:/opt/docker/etc/nginx/conf.d/default.conf
    depends_on:
      - db-staging
      - backend-staging
      - frontend-staging
    networks:
      - app-network-staging

networks:
  app-network-staging:
    driver: bridge

volumes:
  frontend-staging:
  backend-staging:
